#-- coding: utf-8 --

""" Plugin: ูุดู ุงูุญุถูุฑ ุงูุฐูู ูุชูุงูู ูุน ูุดุฑูุน ูููุซูู (yamenthon) ููุณุชุฎุฏู @zedub.zed_cmd ูุธููุฉ: ุชูุนูู/ุชุนุทูู ูุฑุงูุจุฉ ูุฌูุฏ ุงููุณุชุฎุฏููู (online) ูุฅุฑุณุงู ุฅุดุนุงุฑ ููุฌููุนุฉ ุงูุชุณุฌูู BOTLOG_CHATID

ุทุฑููุฉ ุงูุงุณุชุฎุฏุงู: .ุชูุนูู ุงููุงุดู ุงูุฐูู <@username | user_id> ุฃู ุงูุฑุฏ ุนูู ุฑุณุงูุฉ ุงูุดุฎุต: .ุชูุนูู ุงููุงุดู ุงูุฐูู

.ุชุนุทูู ุงููุงุดู ุงูุฐูู <@username | user_id> ุฃู ุงูุฑุฏ ุนูู ุฑุณุงูุฉ ุงูุดุฎุต: .ุชุนุทูู ุงููุงุดู ุงูุฐูู

ุงุญูุธ ุงูููู ุฏุงุฎู ูุฌูุฏ plugins ุจุงุณู: ูุดู_ุงูุญุถูุฑ_ุงูุฐูู.py

ููุงุญุธุงุช:

ูุญุชุงุฌ ุงูุจูุช/ุงูููุฒุฑุจูุช ูุตูุงุญูุฉ ุฑุคูุฉ ุงูุญุงูุฉ (presence). ุจุนุถ ุงูุฅุนุฏุงุฏุงุช ูู ุชูููุฌุฑุงู ูุฏ ุชููุน ุฑุคูุฉ ุงูุญุงูุฉ.

ูุชู ุนูู ูุญุต ุฏูุฑู (polling) ูู 15 ุซุงููุฉ. ูููู ุชุนุฏูู INTERVAL_SEC ุฅู ุฑุบุจุช.

ุงูุฅุดุนุงุฑุงุช ุชูุฑุณู ุฅูู BOTLOG_CHATID ุงููุนุฑูุฉ ูู ูุดุฑูุนู. """


import json import os import asyncio from datetime import datetime from telethon.errors import RPCError from telethon.tl.types import User

from yamenthon import zedub from . import BOTLOG_CHATID

DATA_FILE = "smart_presence_db.json" INTERVAL_SEC = 5  # ูุชุฑุฉ ุงูุชุญูู ุจุงูุฏูุงุฆู: ููููู ุชูููู/ุฒูุงุฏุฉ ุญุณุจ ุญุงุฌุชู

ุจููุฉ ุงูููู: {"monitored": {"<user_id>": {"first_seen": "...", "last_state": "online"/"offline", "name": "..."}}}

def load_db(): if not os.path.exists(DATA_FILE): return {"monitored": {}} try: with open(DATA_FILE, "r", encoding="utf-8") as f: return json.load(f) except Exception: return {"monitored": {}}

def save_db(db): with open(DATA_FILE, "w", encoding="utf-8") as f: json.dump(db, f, ensure_ascii=False, indent=2)

async def resolve_user_from_arg_or_reply(event, arg: str): """ุญููู ุงููุณุงุฆุท (ููุฒุฑ/ุขูุฏู) ุฃู ุงูุฑุฏ ููุญุตูู ุนูู ููุงู ุงููุณุชุฎุฏู ู user_id ู ุงุณู""" client = event.client target = None

# ุฃููุงู: ุฅุฐุง ุชู ุงูุฑุฏ ุนูู ุฑุณุงูุฉ
if event.is_reply:
    try:
        msg = await event.get_reply_message()
        if msg and msg.from_id:
            target = await client.get_entity(msg.from_id)
            return target
    except Exception:
        pass

# ุซุงููุงู: ุฅุฐุง ูุฑุฏุช ูุณุงุฆุท ูุตูุฉ (ููุฒุฑ ุฃู ุขูุฏู)
if arg:
    arg = arg.strip()
    # ุฅุฐุง ุฑูู
    if arg.isdigit():
        try:
            target = await client.get_entity(int(arg))
            return target
        except Exception:
            pass
    # ุฅุฐุง ุฐูุฑ ูุณุชุฎุฏู @username
    if arg.startswith("@"):
        try:
            target = await client.get_entity(arg)
            return target
        except Exception:
            pass

return None

@zedub.zed_cmd(pattern=r"ุชูุนูู ุงููุงุดู ุงูุฐูู(?:\s+(.+))?$") async def enable_smart_presence(event): """ุชูุนูู ูุฑุงูุจุฉ ุดุฎุต""" if BOTLOG_CHATID in (None, 0, ""): await event.reply("ุฎุทุฃ: ุชุนุฑูู ูุชุบูุฑ BOTLOG_CHATID ุบูุฑ ููุฌูุฏ. ุงูุฑุฌุงุก ุถุจุทู ูู ุฅุนุฏุงุฏุงุช ุงููุดุฑูุน.") return

arg = event.pattern_match.group(1) if event.pattern_match else None
user_entity = await resolve_user_from_arg_or_reply(event, arg or "")
if not user_entity or not isinstance(user_entity, User):
    await event.reply("ุฎุทุฃ: ูู ุฃุณุชุทุน ุงูุนุซูุฑ ุนูู ุงููุณุชุฎุฏู. ุงุณุชุฎุฏู: `.ุชูุนูู ุงููุงุดู ุงูุฐูู @username` ุฃู ุฑูุฏ ุนูู ุฑุณุงูุฉ ุงูุดุฎุต.")
    return

uid = int(user_entity.id)
name = (user_entity.first_name or "") + (" " + user_entity.last_name if getattr(user_entity, "last_name", None) else "")
if not name.strip():
    name = user_entity.username or str(uid)

db = load_db()
monitored = db.setdefault("monitored", {})
if str(uid) in monitored:
    await event.reply(f"๐ ุจุงููุนู ูุชู ูุฑุงูุจุฉ {name} (id: {uid}).")
    return

monitored[str(uid)] = {
    "first_seen": datetime.utcnow().isoformat(),
    "last_state": None,
    "name": name,
}
save_db(db)

await event.reply(f"โ ุชู ุชูุนูู ุงููุงุดู ุงูุฐูู ูููุณุชุฎุฏู: [{name}](tg://user?id={uid})\nุณุฃุฑุณู ุฅุดุนุงุฑูุง ุฅูู ูุฌููุนุฉ ุงูุฅุดุนุงุฑุงุช ุนูุฏ ุชุณุฌูู ุชูุงุฌุฏู.", parse_mode='md')

@zedub.zed_cmd(pattern=r"ุชุนุทูู ุงููุงุดู ุงูุฐูู(?:\s+(.+))?$") async def disable_smart_presence(event): """ุฅููุงู ูุฑุงูุจุฉ ุดุฎุต""" arg = event.pattern_match.group(1) if event.pattern_match else None user_entity = await resolve_user_from_arg_or_reply(event, arg or "") if not user_entity or not isinstance(user_entity, User): await event.reply("ุฎุทุฃ: ูู ุฃุณุชุทุน ุงูุนุซูุฑ ุนูู ุงููุณุชุฎุฏู. ุงุณุชุฎุฏู: .ุชุนุทูู ุงููุงุดู ุงูุฐูู @username ุฃู ุฑูุฏ ุนูู ุฑุณุงูุฉ ุงูุดุฎุต.") return

uid = int(user_entity.id)
name = (user_entity.first_name or "") or user_entity.username or str(uid)

db = load_db()
monitored = db.setdefault("monitored", {})
if str(uid) not in monitored:
    await event.reply(f"โน๏ธ ุงููุณุชุฎุฏู [{name}](tg://user?id={uid}) ุบูุฑ ูุฑุงูุจ ุฃุตูุงู.", parse_mode='md')
    return

monitored.pop(str(uid), None)
save_db(db)
await event.reply(f"โ ุชู ุฅููุงู ูุฑุงูุจุฉ ุงููุณุชุฎุฏู [{name}](tg://user?id={uid}).", parse_mode='md')

async def presence_watcher_loop(client): """ุญููุฉ ุชุนูู ูู ุงูุฎูููุฉ ูุชุชุญูู ูู ุญุงูุฉ ุงููุณุชุฎุฏููู ุงููุฑุงูุจูู""" await client.connect() while True: try: db = load_db() monitored = db.get("monitored", {}) if not monitored: await asyncio.sleep(INTERVAL_SEC) continue

# ูุฌูุน ุงูููุฒุฑ ุงูุฏูุฒ ููุณุชุฏุนููู ุฏูุนุฉ ูุงุญุฏุฉ
        ids = [int(k) for k in monitored.keys()]
        for uid in ids:
            try:
                entity = await client.get_entity(uid)
            except RPCError:
                # ูุง ูููู ุฌูุจ ุงูููุงู ุงูุขู
                await asyncio.sleep(0.5)
                continue
            except Exception:
                continue

            # ุญุงูุฉ ุงูููุฒุฑ: ุจุนุถ ุงููุงุฆูุงุช ูุฏ ูุง ุชุญุชูู status
            status = getattr(entity, 'status', None)
            is_online = False
            if status is not None:
                # Telethon ูุถุน status ูู UserStatusOnline / UserStatusRecently / etc
                stname = type(status).__name__.lower()
                # ุงุนุชุจุงุฑุงุช ุจุณูุทุฉ: ุฅุฐุง ุชุถูู ุงูุงุณู "online" ุงุนุชุจุฑ ูุชุตู
                if 'online' in stname:
                    is_online = True
                elif 'recently' in stname:
                    # ูููู ุฃู ูุนุชุจุฑ recently ูู online ุจุญุณุจ ุฑุบุจุชู โ ููุง ูู ูุนุชุจุฑูุง ูุชุตูุฉ
                    is_online = False
            else:
                is_online = False

            rec = monitored.get(str(uid), {})
            last = rec.get('last_state')
            name = rec.get('name') or (entity.first_name or entity.username or str(uid))

            if is_online and last != 'online':
                # ุชุบููุฑ ุฅูู ูุชุตู -> ุฃุฑุณู ุฅุดุนุงุฑ
                msg = f"๐ ุงููุณุชุฎุฏู ุงูุขู ูุชุตู: [{name}](tg://user?id={uid})\nุงูููุช: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}"
                try:
                    await client.send_message(BOTLOG_CHATID, msg, parse_mode='md')
                except Exception:
                    # ูุดู ุงูุฅุฑุณุงู ูุง ูููู ุงูุญููุฉ
                    pass
                rec['last_state'] = 'online'
                monitored[str(uid)] = rec
                save_db(db)

            elif (not is_online) and last == 'online':
                # ุชุจุฏูู ูู ูุชุตู ุฅูู ุบูุฑ ูุชุตู -> ูุญุฏุซ ุงูุญุงูุฉ ููุท (ุงุฎุชูุงุฑู: ูุฑุณู ุฅุดุนุงุฑ ุนูุฏ ุงูุฎุฑูุฌ)
                rec['last_state'] = 'offline'
                monitored[str(uid)] = rec
                save_db(db)

            # ูุง ุชุบููุฑ -> ุชุฌุงูู
            await asyncio.sleep(0.3)  # ุชุฎููู ุงูุถุบุท ุจูู ุงูุทูุจุงุช

    except Exception:
        # ูุง ูุฑูุฏ ุฃู ุชุชููู ุงูุญููุฉ ุจุณุจุจ ุฎุทุฃ ุนุงุฑุถ
        await asyncio.sleep(5)
    await asyncio.sleep(INTERVAL_SEC)

ุชุณุฌูู ุงููููุฉ ุนูุฏ ุจุฏุก ุงูุจูุช

@zedub.zed_cmd(pattern=r"(?:start|boot|init)_presence_watcher$") async def _start_presence_watcher(event): """ุฃูุฑ ุฏุงุฎูู ูุชุดุบูู ุงูุญููุฉ ุนูุฏ ุจุฏุงูุฉ ุงูุชุดุบูู. ููููู ุงุณุชุฏุนุงุคู ูุฏููุงู ุฃู ุฅุถุงูุชู ูุจุฏุก ุงูุชุดุบูู.""" client = event.client # ุดุบูู ุงูุญููุฉ ุจุดูู ุบูุฑ ูุญุธูุฑ client.loop.create_task(presence_watcher_loop(client)) await event.reply("โ ุชู ุชุดุบูู ุญููุฉ ูุฑุงูุจุฉ ุงูุญุถูุฑ (presence watcher).")

"""ุฅุฐุง ูุงู ูู ูุดุฑูุนู ููุฌุฏ hook ูุชุดุบูู ููุงู ุนูุฏ ุงูุฅููุงุน ููููู ุงุณุชุฏุนุงุก presence_watcher_loop(client)

ูุซุงู: ุนูุฏ init ุงูุฑุฆูุณู: client.loop.create_task(presence_watcher_loop(client))

"""
